{
	"info": {
		"_postman_id": "17b514ba-58d6-4d8b-85bb-8f137e2cb43d",
		"name": "end-to-end-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8538440"
	},
	"item": [
		{
			"name": "/auth/token -> 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const token = pm.response.json().access_token;\r",
							"pm.globals.set(\"token\", token);\r",
							"\r",
							"pm.test(\"GET /v1.0/auth/token -> 200\", () => {\r",
							"    pm.expect(token).is.not.empty;\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "login",
							"value": "ivanivanov",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123456",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/v1.0/auth/token",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"v1.0",
						"auth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "/experiences -> 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const _2 = require(\"lodash\");\r",
							"\r",
							"pm.test(\"/v1.0/experiences/ -> 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"let respondeBodyActual = pm.response.json();\r",
							"\r",
							"let respondeBodyExpected = {\r",
							"    \"periodFrom\": \"2023-01-01\",\r",
							"    \"periodTo\": \"2023-12-31\",\r",
							"    \"presentTime\": \"2023-11-16\",\r",
							"    \"industry\": {\r",
							"        \"name\": \"Software Development\"\r",
							"    },\r",
							"    \"company\": \"Tech Solutions Inc.\",\r",
							"    \"position\": \"Senior Developer\",\r",
							"    \"achievements\": \"Led a team of developers to create a new product.\",\r",
							"    \"link\": \"http://example.com\",\r",
							"    \"duties\": [\r",
							"        {\r",
							"            \"name\": \"Developed new features\"\r",
							"        },\r",
							"        {\r",
							"            \"name\": \"Fix bugs\"\r",
							"        }\r",
							"    ]\r",
							"};\r",
							"\r",
							"pm.test(\"Response contains expected fields and values\", function () {\r",
							"    pm.expect(_2.isMatch(respondeBodyActual, respondeBodyExpected)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains uuid fields\", function () {\r",
							"    pm.expect(respondeBodyActual).to.have.property('uuid').that.is.a('string').and.is.not.empty;\r",
							"    pm.expect(respondeBodyActual.industry).to.have.property('id').that.is.a('number');\r",
							"\r",
							"    pm.expect(respondeBodyActual).to.have.property('duties').that.is.an('array');\r",
							"    respondeBodyActual.duties.forEach(function(duty, index) {\r",
							"        pm.expect(duty).to.have.property('uuid').that.is.a('string').and.is.not.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"uuid\", pm.response.json().uuid);\r",
							"\r",
							"pm.collectionVariables.set(\"experience\", pm.response.json());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"periodFrom\": \"2023-01-01\",\r\n    \"periodTo\": \"2023-12-31\",\r\n    \"presentTime\": \"2023-11-16\",\r\n    \"industry\": {\r\n        \"id\": null,\r\n        \"name\": \"Software Development\"\r\n    },\r\n    \"company\": \"Tech Solutions Inc.\",\r\n    \"position\": \"Senior Developer\",\r\n    \"achievements\": \"Led a team of developers to create a new product.\",\r\n    \"link\": \"http://example.com\",\r\n    \"duties\": [\r\n        {\r\n            \"name\": \"Developed new features\"\r\n        },\r\n        {\r\n            \"name\": \"Fix bugs\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/v1.0/experiences/",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"v1.0",
						"experiences",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "/experiences/{existedId} -> 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET /v1.0/experiences/{{existedId}} -> 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"const expectedJson = pm.collectionVariables.get(\"experience\");\r",
							"const actualJson = pm.response.json();\r",
							"const _1 = require(\"lodash\");\r",
							"\r",
							"console.log(expectedJson);\r",
							"console.log(actualJson);\r",
							"\r",
							"pm.test(\"GET /v1.0/experiences/{{existedId}} -> hasARightBodyAnswer\", () => {\r",
							"    pm.expect(_1.isEqual(actualJson, expectedJson)).to.be.true;\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/v1.0/experiences/{{uuid}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"v1.0",
						"experiences",
						"{{uuid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/experiences/{wrongIdFormat} -> 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/v1.0/experiences/{{wrongIdFormat}} -> 400\", () => {\r",
							"    pm.response.to.have.status(400)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/v1.0/experiences/{{wrongIdFormat}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"v1.0",
						"experiences",
						"{{wrongIdFormat}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/experiences/{{nonExistentId)} -> 404 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/v1.0/experiences/{{nonExistentId}} -> 404\", () => {\r",
							"    pm.response.to.have.status(404)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/v1.0/experiences/{{nonExistentId}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"v1.0",
						"experiences",
						"{{nonExistentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/experiences/{{existedId}} -> 204 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"DELETE /v1.0/experiences/{{uuid}} -> 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/v1.0/experiences/{{uuid}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"v1.0",
						"experiences",
						"{{uuid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/experiences/{{existedId}} -> 204 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"DELETE /v1.0/experiences/{{uuid}} -> 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/v1.0/experiences/{{uuid}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"v1.0",
						"experiences",
						"{{uuid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/industries -> 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/v1.0/industries/ -> 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\"id\", \"name\"]\r",
							"};\r",
							"\r",
							"pm.test(\"Validate JSON Schema\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate specific JSON values\", function () {\r",
							"    pm.expect(pm.response.json().name).to.eql(\"Industry1\");\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"id\", pm.response.json().id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Industry1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/v1.0/industries",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"v1.0",
						"industries"
					]
				}
			},
			"response": []
		},
		{
			"name": "/industries/{existedId} -> 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET /v1.0/industries/{{existedId}} -> 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\" : \"string\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\"id\", \"name\"]\r",
							"}\r",
							"\r",
							"pm.test(\"GET /v1.0/industries/{{existedId}} -> validate JSON schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})\r",
							"\r",
							"pm.test(\"GET /v1.0/industries/{{existedId}} -> validate JSON values\", () => {\r",
							"    pm.expect(pm.response.json().id).to.be.exist; \r",
							"    pm.expect(pm.response.json().name).to.eql(\"Industry1\");\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/v1.0/industries/{{id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"v1.0",
						"industries",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/experiences/{wrongIdFormat} -> 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/v1.0/industries/{{wrongIdFormat}} -> 400\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/v1.0/industries/qwe123",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"v1.0",
						"industries",
						"qwe123"
					]
				}
			},
			"response": []
		},
		{
			"name": "/industries/{{nonExistentId)} -> 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/v1.0/experiences/{{nonExistentId}} -> 404\", () => {\r",
							"    pm.response.to.have.status(404)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/v1.0/industries/99999",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"v1.0",
						"industries",
						"99999"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "uuid",
			"value": ""
		},
		{
			"key": "experience",
			"value": ""
		},
		{
			"key": "wrongIdFormat",
			"value": "123456",
			"type": "string"
		},
		{
			"key": "nonExistentId",
			"value": "11111111-1111-1111-1111-111111111111",
			"type": "string"
		},
		{
			"key": "id",
			"value": ""
		}
	]
}